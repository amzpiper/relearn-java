package thread;

import java.util.Random;

/**
 * @author guoyh
 */
public class ForkJoinDemo {
    public static void main(String[] args) {
        //Java 7开始引入了一种新的Fork/Join线程池，它可以执行一种特殊的任务：把一个大任务拆成多个小任务并行执行。
        //我们举个例子：如果要计算一个超大数组的和，最简单的做法是用一个循环在一个线程内完成：
        //┌─┬─┬─┬─┬─┬─┬─┬─┬─┬─┬─┬─┬─┬─┬─┬─┬─┬─┬─┬─┬─┬─┬─┬─┐
        //└─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┘
        //还有一种方法，可以把数组拆成两部分，分别计算，最后加起来就是最终结果，这样可以用两个线程并行执行：
        //┌─┬─┬─┬─┬─┬─┬─┬─┬─┬─┬─┬─┐
        //└─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┘
        //┌─┬─┬─┬─┬─┬─┬─┬─┬─┬─┬─┬─┐
        //└─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┘
        //如果拆成两部分还是很大，我们还可以继续拆，用4个线程并行执行：
        //┌─┬─┬─┬─┬─┬─┐
        //└─┴─┴─┴─┴─┴─┘
        //┌─┬─┬─┬─┬─┬─┐
        //└─┴─┴─┴─┴─┴─┘
        //┌─┬─┬─┬─┬─┬─┐
        //└─┴─┴─┴─┴─┴─┘
        //┌─┬─┬─┬─┬─┬─┐
        //└─┴─┴─┴─┴─┴─┘
        //这就是Fork/Join任务的原理：判断一个任务是否足够小，如果是，直接计算，
        //否则，就分拆成几个小任务分别计算。这个过程可以反复“裂变”成一系列小任务。
        //我们来看如何使用Fork/Join对大数据进行并行求和：
        long[] array = new long[2000];
        long expectedSum = 0;
        for (int i = 0; i <array.length ; i++) {
            array[i] = new Random().nextInt(1000);
            expectedSum += array[i];
        }
        System.out.println("Expected sum: " + expectedSum);

        // fork/join:
    }
}
